import { makeAutoObservable, runInAction } from 'mobx';

import { templatesApi } from '@shared/api';
import {
  type ObjectTemplate,
  type CreateTemplateRequest,
  type UpdateTemplateRequest,
  type ApiError,
} from '@shared/types';

export class TemplateStore {
  templates: ObjectTemplate[] = [];
  activeTemplates: ObjectTemplate[] = [];
  currentTemplate: ObjectTemplate | null = null;
  isLoading = false;
  error: string | null = null;

  constructor() {
    makeAutoObservable(this);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
  loadTemplates = async (params?: { deleted?: boolean; name?: string }): Promise<void> => {
    this.setLoading(true);
    this.clearError();

    try {
      const templates = await templatesApi.getTemplates(params);
      runInAction(() => {
        this.templates = templates;
        this.updateActiveTemplatesList();
      });
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤';
      });
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  loadActiveTemplates = async (): Promise<void> => {
    this.setLoading(true);
    this.clearError();

    try {
      const templates = await templatesApi.getActiveTemplates();
      runInAction(() => {
        this.activeTemplates = templates;
      });
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤';
      });
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  loadTemplate = async (id: string): Promise<void> => {
    this.setLoading(true);
    this.clearError();

    try {
      const template = await templatesApi.getTemplate(id);
      runInAction(() => {
        this.currentTemplate = template;
      });
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞';
      });
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  createTemplate = async (data: CreateTemplateRequest): Promise<ObjectTemplate | null> => {
    this.setLoading(true);
    this.clearError();

    try {
      // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
      const newTemplate = await templatesApi.createTemplate(data);

      runInAction(() => {
        this.templates.push(newTemplate);
        this.updateActiveTemplatesList();
      });

      return newTemplate;
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞';
      });
      return null;
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  updateTemplate = async (
    id: string,
    data: UpdateTemplateRequest,
  ): Promise<ObjectTemplate | null> => {
    this.setLoading(true);
    this.clearError();

    try {
      const updatedTemplate = await templatesApi.updateTemplate(id, data);

      runInAction(() => {
        const index = this.templates.findIndex((t) => t.id === id);
        if (index !== -1) {
          this.templates[index] = updatedTemplate;
        }

        if (this.currentTemplate?.id === id) {
          this.currentTemplate = updatedTemplate;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        this.updateActiveTemplatesList();
      });

      return updatedTemplate;
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞';
      });
      return null;
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DELETE)
  deactivateTemplate = async (id: string): Promise<boolean> => {
    this.setLoading(true);
    this.clearError();

    try {
      // DELETE –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await templatesApi.deleteTemplate(id);

      // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      runInAction(() => {
        const template = this.templates.find((t) => t.id === id);
        if (template) {
          template.deleted = true;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        if (this.currentTemplate?.id === id) {
          this.currentTemplate = null;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        this.updateActiveTemplatesList();
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await this.loadTemplates();

      return true;
    } catch (error) {
      console.error('üî¥ –û—à–∏–±–∫–∞ –≤ deactivateTemplate:', error);
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞';
      });
      return false;
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
  deleteTemplate = async (id: string): Promise<boolean> => {
    this.setLoading(true);
    this.clearError();

    try {
      await templatesApi.deleteTemplate(id);

      runInAction(() => {
        // –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        this.templates = this.templates.filter((t) => t.id !== id);

        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        if (this.currentTemplate?.id === id) {
          this.currentTemplate = null;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        this.updateActiveTemplatesList();
      });

      return true;
    } catch (error) {
      const apiError = error as ApiError;
      runInAction(() => {
        this.error = apiError.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞';
      });
      return false;
    } finally {
      runInAction(() => {
        this.isLoading = false;
      });
    }
  };

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  private setLoading = (loading: boolean) => {
    this.isLoading = loading;
  };

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  private clearError = () => {
    this.error = null;
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  private updateActiveTemplatesList = () => {
    this.activeTemplates = this.templates.filter((t) => !t.deleted);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–æ ID
  getTemplateById = (id: string): ObjectTemplate | undefined => {
    return this.templates.find((t) => t.id === id);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  getActiveTemplates = (): ObjectTemplate[] => {
    return this.activeTemplates;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
  get hasActiveTemplates(): boolean {
    return this.activeTemplates.length > 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤
  get templatesCount(): number {
    return this.templates.length;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  get activeTemplatesCount(): number {
    return this.activeTemplates.length;
  }
}
