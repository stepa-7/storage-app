openapi: 3.0.0
info:
  title: Storage Management System API
  version: 1.0.0
  description: API для системы управления хранилищами, объектами и уведомлениями

servers:
  - url: https://api.storage-system.com/v1
    description: Production server

paths:
  /auth/signup:
    post:
      tags: [Authentication]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  signup:
                    type: string
                    example: 'success'
        '400':
          description: Эл. почта или почта уже заняты
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'login_exists' }
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/signin:
    post:
      tags: [Authentication]
      summary: Авторизация (signin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'invalid_credentials' }
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Обновление access token
      security:
        - refreshCookieAuth: []
      responses:
        '200':
          description: Новый access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Refresh token недействителен
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'refresh_invalid_or_expired' }
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Выход из аккаунта
      security:
        - refreshCookieAuth: []
      responses:
        '200':
          description: Успешный logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  logout: { type: string, example: 'ok' }
        '500':
          $ref: '#/components/responses/InternalError'

  /admin/users:
    get:
      tags: [Admin]
      summary: Получить список всех пользователей
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'

  /user/{id}/roles:
    put:
      tags: [Admin]
      summary: Обновить роли пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
              example: ['ADMIN', 'GUEST']
      responses:
        '200':
          description: Роли успешно обновлены
          content:
            application/json:
              schema:
                type: string
                example: 'Roles updated'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error: { type: string, example: 'User not found' }
        '500':
          $ref: '#/components/responses/InternalError'

  /storages:
    get:
      summary: Получить список хранилищ
      parameters:
        - name: parent_id
          in: query
          schema: { type: string, format: uuid, nullable: true }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'

    post:
      summary: Создать хранилище
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'

  /storages/{id}:
    get:
      summary: Получить хранилище по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'

    patch:
      summary: Обновить хранилище
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'

    delete:
      summary: Удалить хранилище
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /objects:
    get:
      summary: Получить объекты с фильтрами
      parameters:
        - name: storage_id
          in: query
          schema: { type: string, format: uuid }
        - name: template_id
          in: query
          schema: { type: string, format: uuid }
        - name: decommissioned
          in: query
          schema: { type: boolean }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageObject'

    post:
      summary: Создать объект
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StorageObjectCreateWithFile'
          application/json:
            schema:
              $ref: '#/components/schemas/StorageObjectCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageObject'

  /objects/{id}:
    get:
      summary: Получить объект по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageObject'

    patch:
      summary: Обновить объект
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StorageObjectUpdateWithFile'
          application/json:
            schema:
              $ref: '#/components/schemas/StorageObjectUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageObject'

    delete:
      summary: Удалить объект
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: Deleted

  /objects/{id}/qrcode:
    get:
      summary: Сгенерировать QR-код для объекта
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: QR code image
          content:
            image/png: {}

  /templates:
    get:
      summary: Получить список шаблонов
      parameters:
        - name: is_deleted
          in: query
          schema: { type: boolean }
        - name: name
          in: query
          schema: { type: string }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'

    post:
      summary: Создать шаблон
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'

  /templates/{id}:
    get:
      summary: Получить шаблон по ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'

    patch:
      summary: Обновить шаблон
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'

  /units:
    get:
      summary: Получить все единицы измерения
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshCookieAuth:
      type: apiKey
      in: cookie
      name: REFRESH_TOKEN

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        login:
          type: string
          example: 'ivan'
        mail:
          type: string
          format: email
          example: 'ivan@example.com'
        role:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          example: ['GUEST']

    UserRole:
      type: string
      enum:
        - ADMIN
        - GUEST
      example: GUEST

    SigninRequest:
      type: object
      required: [login, password]
      properties:
        login: { type: string, example: 'ivan' }
        password: { type: string, example: 'secret' }

    SignupRequest:
      type: object
      required: [login, email, password]
      properties:
        login: { type: string, example: 'ivan' }
        email: { type: string, format: email, example: 'ivan@example.com' }
        password: { type: string, example: 'secret' }

    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        tokenType: { type: string, example: 'Bearer' }
        expiresIn: { type: integer }

    SimpleMessage:
      type: object
      properties:
        message:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string

    Storage:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        capacity: { type: number }
        fullness: { type: number }
        unit_id: { type: string, format: uuid }
        parent_id: { type: string, format: uuid, nullable: true }
        created_by: { type: string, format: uuid }
        is_deleted: { type: boolean }

    StorageObject:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        template_id: { type: string, format: uuid }
        storage_id: { type: string, format: uuid }
        size: { type: number }
        unit_id: { type: string, format: uuid }
        attributes: { type: object }
        photo_url: { type: string, nullable: true }
        is_decommissioned: { type: boolean }
        created_by: { type: string, format: uuid }
        created_at: { type: string, format: date-time }

    Template:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        description: { type: string }
        schema: { type: object }
        is_deleted: { type: boolean }
        created_by: { type: string, format: uuid }

    Unit:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        symbol: { type: string }

    StorageCreate:
      type: object
      required: [name, capacity, unit_id]
      properties:
        name: { type: string }
        capacity: { type: number }
        unit_id: { type: string, format: uuid }
        parent_id: { type: string, format: uuid, nullable: true }

    StorageUpdate:
      type: object
      properties:
        name: { type: string }
        capacity: { type: number }
        parent_id: { type: string, format: uuid, nullable: true }

    StorageObjectCreate:
      type: object
      required: [name, template_id, storage_id, size, unit_id]
      properties:
        name: { type: string }
        template_id: { type: string, format: uuid }
        storage_id: { type: string, format: uuid }
        size: { type: number }
        unit_id: { type: string, format: uuid }
        attributes: { type: object }
        photo_url: { type: string, nullable: true }

    StorageObjectCreateWithFile:
      type: object
      required: [name, template_id, storage_id, size, unit_id]
      properties:
        name: { type: string }
        template_id: { type: string, format: uuid }
        storage_id: { type: string, format: uuid }
        size: { type: number }
        unit_id: { type: string, format: uuid }
        attributes: { type: string }
        photo:
          type: string
          format: binary
          nullable: true

    StorageObjectUpdate:
      type: object
      properties:
        name: { type: string }
        storage_id: { type: string, format: uuid }
        size: { type: number }
        attributes: { type: object }
        is_decommissioned: { type: boolean }

    StorageObjectUpdateWithFile:
      type: object
      properties:
        name: { type: string }
        storage_id: { type: string, format: uuid }
        size: { type: number }
        attributes: { type: string }
        is_decommissioned: { type: boolean }
        photo:
          type: string
          format: binary
          nullable: true

    TemplateCreate:
      type: object
      required: [name, schema]
      properties:
        name: { type: string }
        description: { type: string }
        schema: { type: object }

    TemplateUpdate:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        is_deleted: { type: boolean }

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Authentication
    description: Аутентификация и управление токенами
  - name: Admin
    description: Операции, доступные только администраторам

security:
  - bearerAuth: []
