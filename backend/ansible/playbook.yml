---
- name: Deploy backend stack
  hosts: backend
  become: true
  gather_facts: yes

  vars:
    app_user: "{{ ansible_user | default('team_user') }}"
    app_group: "{{ ansible_user | default('team_user') }}"
    registry: "{{ registry | default(ci_registry, true) }}"
    tag: "{{ tag | default(image_tag, true) }}"
    compose_abs_path: "{{ compose_dir }}/{{ compose_file }}"
    # Порты, которые публикуем наружу (для проверки конфликтов)
    published_ports:
      - 8080   # api-gateway
      - 8081   # qr-module
      - 8082   # storage-app
      - 8083   # auth-service
      - 9000   # MinIO S3
      - 9090   # MinIO console
    force_free_ports: true

  pre_tasks:
    - name: Ensure base packages present
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - python3
          - python3-pip
        state: present
        update_cache: yes

    - name: Ensure required secrets exist
      ansible.builtin.assert:
        that:
          - auth_postgres_password | length > 8
          - storage_postgres_password | length > 8
          - jwt_secret | length >= 16
          - minio_secret_key | length >= 12
        fail_msg: "Missing/weak secrets in GitLab CI Variables."

    - name: Ensure deploy directory exists with owner
      ansible.builtin.file:
        path: "{{ compose_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0755"

  roles:
    - role: nginx

  tasks:
    - name: Render deploy docker-compose from template
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/docker-compose.deploy.yml.j2"
        dest: "{{ compose_abs_path }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0644"
      vars:
        registry: "{{ registry }}"
        tag: "{{ tag }}"

    - name: Render auth-service .env
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/auth-service.env.j2"
        dest: "{{ compose_dir }}/auth-service.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0600"

    - name: Render storage-module .env
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/storage-module.env.j2"
        dest: "{{ compose_dir }}/storage-module.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0600"

    - name: Docker login (registry)
      community.docker.docker_login:
        registry_url: "{{ ci_registry }}"
        username: "{{ ci_registry_user }}"
        password: "{{ ci_registry_password }}"
      when: ci_registry != ""

    # --- мягко опускаем стек до чистого состояния (volumes не трогаем) ---
    - name: Compose down (no volumes) to avoid stale resources
      community.docker.docker_compose:
        project_name: "{{ project_name }}"
        project_src: "{{ compose_dir }}"
        files: ["{{ compose_file }}"]
        state: absent
        remove_orphans: true
      ignore_errors: true

    # --- проверяем конфликты портов и гасим сторонние контейнеры при необходимости ---
    - name: List running containers as JSON lines
      ansible.builtin.command:
        argv:
          - bash
          - -lc
          - "docker ps --format '{{json .}}'"
      register: docker_ps_json
      changed_when: false

    - name: Build list of conflicting container IDs (publishing target ports)
      ansible.builtin.set_fact:
        conflicting_ids: >-
          {{
            docker_ps_json.stdout_lines
            | map('from_json')
            | selectattr('Ports', 'defined')
            | selectattr('Ports', 'search', '0\\.0\\.0\\.0:(' ~ (published_ports | join('|')) ~ ')')
            | map(attribute='ID')
            | list
          }}

    - name: Stop conflicting containers that hold our ports
      when: force_free_ports and (conflicting_ids | length > 0)
      community.docker.docker_container:
        name: "{{ item }}"
        state: stopped
      loop: "{{ conflicting_ids }}"
      ignore_errors: true

    # --- тянем образы без запуска контейнеров ---
    - name: Compose pull images only
      ansible.builtin.command:
        argv:
          - bash
          - -lc
          - "docker compose -f '{{ compose_abs_path }}' pull"
      args:
        chdir: "{{ compose_dir }}"
      register: pull_out
      changed_when: "'Downloaded' in pull_out.stdout or 'Pulled' in pull_out.stdout"

    # --- поднимаем стек ---
    - name: Up stack (fresh)
      community.docker.docker_compose:
        project_name: "{{ project_name }}"
        project_src: "{{ compose_dir }}"
        files: ["{{ compose_file }}"]
        state: present

    # --- диагностика на всякий случай ---
    - name: docker compose ps
      ansible.builtin.command:
        argv:
          - bash
          - -lc
          - "docker compose -f '{{ compose_abs_path }}' ps"
      args:
        chdir: "{{ compose_dir }}"
      register: ps_out
      changed_when: false

    - name: Show compose ps
      ansible.builtin.debug:
        var: ps_out.stdout
