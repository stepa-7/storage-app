version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway-module
    ports:
      - "8080:8080"
    depends_on:
      storage-app:
        condition: service_healthy
      qr-module:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - app-network

  # Auth Service
  auth-db:
    image: postgres:14
    container_name: auth_db
    env_file: ./auth-service/.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"  # Отличный порт от storage_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    container_name: auth_service
    env_file: ./auth-service/.env
    ports:
      - "8083:8080"
    depends_on:
      auth-db:
        condition: service_healthy
    environment:
      DB_URL: jdbc:postgresql://auth-db:5432/${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Storage Module
  storage_db:
    image: postgres:16
    container_name: storage_db
    env_file: ./storage-module/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - storage_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  storage-app:
    build: ./storage-module
    container_name: storage_app
    env_file: ./storage-module/.env
    depends_on:
      storage_db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://storage_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8082:8082"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # QR Module
  qr-module:
    build: ./qr-module
    container_name: qr_module
    ports:
      - "8081:8081"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: minio
    env_file: ./storage-module/.env
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9090"
    ports:
      - "9090:9090"
      - "9000:9000"
    volumes:
      - minio-data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  storage_db_data:
  auth_db_data:
  minio-data: